unit vPrincipal;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants,
  System.Classes, Vcl.Graphics, System.MaskUtils,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Data.DB, Vcl.Grids, Vcl.DBGrids,
  Vcl.StdCtrls, Vcl.ExtCtrls, dtPrincipal, vCadastroEndereco, System.JSON;

type
  TForm1 = class(TForm)
    Panel1: TPanel;
    GroupBox2: TGroupBox;
    dbgEndereco: TDBGrid;
    Button1: TButton;
    GroupBox1: TGroupBox;
    edtChave: TEdit;
    btnConsultar: TButton;
    rgChave: TRadioGroup;
    rgRetornoConsulta: TRadioGroup;
    procedure Button1Click(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure rgChaveClick(Sender: TObject);
    procedure btnConsultarClick(Sender: TObject);
    procedure edtChaveClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  Form1: TForm1;

const
  KEY_CEP_TEXT: String = 'Informe o CEP sem os pontos (Exp: 01001000)';
  KEY_END_TEXT
    : String = 'Informe a UF, Cidade e logradouro (Exp: UF/CIDADE/LOGRADOURO)';

implementation

{$R *.dfm}

procedure TForm1.btnConsultarClick(Sender: TObject);
var
  JSON: TJSONObject;
  vMaskedValue: String;
begin
  vMaskedValue := FormatMaskText('00000\-000;0;', edtChave.Text);

  if dmPrincipal.FDQuery1.locate('cep', vMaskedValue, []) then
  begin
    if MessageDlg('O CEP informado já existe, deseja atualizalo?',
      mtConfirmation, [mbYes, mbNo], 0, mbNo) = mrYes then
    begin
      JSON := TJSONObject.Create;

      JSON.AddPair('codigo', dmPrincipal.FDQuery1.FieldByName('codigo')
        .AsString);
      JSON.AddPair('cep', dmPrincipal.FDQuery1.FieldByName('cep').AsString);
      JSON.AddPair('logradouro', dmPrincipal.FDQuery1.FieldByName('logradouro')
        .AsString);
      JSON.AddPair('complemento', dmPrincipal.FDQuery1.FieldByName
        ('complemento').AsString);
      JSON.AddPair('bairro', dmPrincipal.FDQuery1.FieldByName('bairro')
        .AsString);
      JSON.AddPair('localidade', dmPrincipal.FDQuery1.FieldByName('localidade')
        .AsString);
      JSON.AddPair('uf', dmPrincipal.FDQuery1.FieldByName('uf').AsString);

      TfrmCadastroEndereco.Execute(JSON);
      dmPrincipal.FDQuery1.Refresh;

      Exit;
    end;

    Abort;
  end;

  begin
    dmPrincipal.ViaCepComponent1.CEP := edtChave.Text;
    JSON := TJSONObject(dmPrincipal.ViaCepComponent1.getJSONByCEP);
    JSON.AddPair('codigo', EmptyStr);

    TfrmCadastroEndereco.Execute(JSON);
    dmPrincipal.FDQuery1.Refresh;
  end;

  dbgEndereco.SetFocus;
end;

procedure TForm1.Button1Click(Sender: TObject);
begin
  TfrmCadastroEndereco.Execute;
  dmPrincipal.FDQuery1.Refresh;
end;

procedure TForm1.edtChaveClick(Sender: TObject);
begin
  edtChave.SelStart := 0;
  edtChave.SelLength := Length(edtChave.Text) + 1;
end;

procedure TForm1.FormShow(Sender: TObject);
var
  vIndex: Integer;
  vColumnValue: String;
begin
  dmPrincipal.FDQuery1.Open;

  { Aplica o melhor dimensionamento para as colunas
    baseado no primeiro registro ou no tamanho do título da coluna }
  for vIndex := 0 to dbgEndereco.Columns.Count - 1 do
  begin
    vColumnValue := dbgEndereco.Fields[vIndex].DisplayText;

    if SameText(vColumnValue, EmptyStr) then
      vColumnValue := dbgEndereco.Columns[vIndex].Title.Caption;

    dbgEndereco.Columns[vIndex].width := 50 + dbgEndereco.Canvas.TextWidth
      (vColumnValue);
  end;

  rgChaveClick(Sender);
end;

procedure TForm1.rgChaveClick(Sender: TObject);
begin
  case rgChave.ItemIndex of
    0:
      begin
        edtChave.NumbersOnly := true;
        edtChave.Text := KEY_CEP_TEXT;
      end;
    1:
      begin
        edtChave.NumbersOnly := false;
        edtChave.Text := KEY_END_TEXT;
      end;
  end;
end;

end.
